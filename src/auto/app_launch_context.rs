// This file was generated by gir (310a2da) from gir-files (71d73f0)
// DO NOT EDIT

use Display;
use Screen;
use ffi;
use glib::Value;
use glib::translate::*;
use gobject_ffi;

glib_wrapper! {
    pub struct AppLaunchContext(Object<ffi::GdkAppLaunchContext>);

    match fn {
        get_type => || ffi::gdk_app_launch_context_get_type(),
    }
}

impl AppLaunchContext {
    pub fn new() -> AppLaunchContext {
        assert_initialized_main_thread!();
        unsafe {
            from_glib_full(ffi::gdk_app_launch_context_new())
        }
    }

    pub fn set_desktop(&self, desktop: i32) {
        unsafe {
            ffi::gdk_app_launch_context_set_desktop(self.to_glib_none().0, desktop);
        }
    }

    pub fn set_display(&self, display: &Display) {
        unsafe {
            ffi::gdk_app_launch_context_set_display(self.to_glib_none().0, display.to_glib_none().0);
        }
    }

    //pub fn set_icon<T: IsA</*Ignored*/gio::Icon>>(&self, icon: Option<&T>) {
    //    unsafe { TODO: call ffi::gdk_app_launch_context_set_icon() }
    //}

    pub fn set_icon_name<'a, T: Into<Option<&'a str>>>(&self, icon_name: T) {
        unsafe {
            ffi::gdk_app_launch_context_set_icon_name(self.to_glib_none().0, icon_name.into().to_glib_none().0);
        }
    }

    pub fn set_screen(&self, screen: &Screen) {
        unsafe {
            ffi::gdk_app_launch_context_set_screen(self.to_glib_none().0, screen.to_glib_none().0);
        }
    }

    pub fn set_timestamp(&self, timestamp: u32) {
        unsafe {
            ffi::gdk_app_launch_context_set_timestamp(self.to_glib_none().0, timestamp);
        }
    }

    pub fn get_property_display(&self) -> Option<Display> {
        let mut value = Value::from(None::<&Display>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "display".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_display(&self, display: Option<&Display>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "display".to_glib_none().0, Value::from(display).to_glib_none().0);
        }
    }
}
