// This file was generated by gir (310a2da) from gir-files (71d73f0)
// DO NOT EDIT

use Display;
#[cfg(feature = "v3_22")]
use Rectangle;
#[cfg(feature = "v3_22")]
use SubpixelLayout;
use ffi;
use glib::Value;
use glib::signal::connect;
use glib::translate::*;
use glib_ffi;
use gobject_ffi;
use std::boxed::Box as Box_;
use std::mem::transmute;

glib_wrapper! {
    pub struct Monitor(Object<ffi::GdkMonitor>);

    match fn {
        get_type => || ffi::gdk_monitor_get_type(),
    }
}

impl Monitor {
    #[cfg(feature = "v3_22")]
    pub fn get_display(&self) -> Option<Display> {
        unsafe {
            from_glib_none(ffi::gdk_monitor_get_display(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_22")]
    pub fn get_geometry(&self) -> Rectangle {
        unsafe {
            let mut geometry = Rectangle::uninitialized();
            ffi::gdk_monitor_get_geometry(self.to_glib_none().0, geometry.to_glib_none_mut().0);
            geometry
        }
    }

    #[cfg(feature = "v3_22")]
    pub fn get_height_mm(&self) -> i32 {
        unsafe {
            ffi::gdk_monitor_get_height_mm(self.to_glib_none().0)
        }
    }

    pub fn get_manufacturer(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gdk_monitor_get_manufacturer(self.to_glib_none().0))
        }
    }

    pub fn get_model(&self) -> Option<String> {
        unsafe {
            from_glib_none(ffi::gdk_monitor_get_model(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_22")]
    pub fn get_refresh_rate(&self) -> i32 {
        unsafe {
            ffi::gdk_monitor_get_refresh_rate(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_22")]
    pub fn get_scale_factor(&self) -> i32 {
        unsafe {
            ffi::gdk_monitor_get_scale_factor(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_22")]
    pub fn get_subpixel_layout(&self) -> SubpixelLayout {
        unsafe {
            from_glib(ffi::gdk_monitor_get_subpixel_layout(self.to_glib_none().0))
        }
    }

    #[cfg(feature = "v3_22")]
    pub fn get_width_mm(&self) -> i32 {
        unsafe {
            ffi::gdk_monitor_get_width_mm(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_22")]
    pub fn get_workarea(&self) -> Rectangle {
        unsafe {
            let mut workarea = Rectangle::uninitialized();
            ffi::gdk_monitor_get_workarea(self.to_glib_none().0, workarea.to_glib_none_mut().0);
            workarea
        }
    }

    #[cfg(feature = "v3_22")]
    pub fn is_primary(&self) -> bool {
        unsafe {
            from_glib(ffi::gdk_monitor_is_primary(self.to_glib_none().0))
        }
    }

    pub fn get_property_display(&self) -> Option<Display> {
        let mut value = Value::from(None::<&Display>);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "display".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get()
    }

    pub fn set_property_display(&self, display: Option<&Display>) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "display".to_glib_none().0, Value::from(display).to_glib_none().0);
        }
    }

    pub fn get_property_height_mm(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "height-mm".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn get_property_refresh_rate(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "refresh-rate".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn get_property_scale_factor(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "scale-factor".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn get_property_width_mm(&self) -> i32 {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "width-mm".to_glib_none().0, value.to_glib_none_mut().0);
        }
        value.get().unwrap()
    }

    pub fn connect_invalidate<F: Fn(&Monitor) + 'static>(&self, f: F) -> u64 {
        unsafe {
            let f: Box_<Box_<Fn(&Monitor) + 'static>> = Box_::new(Box_::new(f));
            connect(self.to_glib_none().0, "invalidate",
                transmute(invalidate_trampoline as usize), Box_::into_raw(f) as *mut _)
        }
    }
}

unsafe extern "C" fn invalidate_trampoline(this: *mut ffi::GdkMonitor, f: glib_ffi::gpointer) {
    callback_guard!();
    let f: &Box_<Fn(&Monitor) + 'static> = transmute(f);
    f(&from_glib_none(this))
}
