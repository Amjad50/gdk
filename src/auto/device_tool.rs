// This file was generated by gir (310a2da) from gir-files (71d73f0)
// DO NOT EDIT

use AxisFlags;
use DeviceToolType;
use ffi;
use glib::Value;
use glib::translate::*;
use gobject_ffi;
use std::mem::transmute;

glib_wrapper! {
    pub struct DeviceTool(Object<ffi::GdkDeviceTool>);

    match fn {
        get_type => || ffi::gdk_device_tool_get_type(),
    }
}

impl DeviceTool {
    #[cfg(feature = "v3_22")]
    pub fn get_hardware_id(&self) -> u64 {
        unsafe {
            ffi::gdk_device_tool_get_hardware_id(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_22")]
    pub fn get_serial(&self) -> u64 {
        unsafe {
            ffi::gdk_device_tool_get_serial(self.to_glib_none().0)
        }
    }

    #[cfg(feature = "v3_22")]
    pub fn get_tool_type(&self) -> DeviceToolType {
        unsafe {
            from_glib(ffi::gdk_device_tool_get_tool_type(self.to_glib_none().0))
        }
    }

    pub fn get_property_axes(&self) -> AxisFlags {
        let mut value = Value::from(&0u32);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "axes".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<u32>().unwrap()))
        }
    }

    pub fn set_property_axes(&self, axes: AxisFlags) {
        let axes = axes.to_glib().bits() as u32;
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "axes".to_glib_none().0, Value::from(&axes).to_glib_none().0);
        }
    }

    pub fn set_property_hardware_id(&self, hardware_id: u64) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "hardware-id".to_glib_none().0, Value::from(&hardware_id).to_glib_none().0);
        }
    }

    pub fn set_property_serial(&self, serial: u64) {
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "serial".to_glib_none().0, Value::from(&serial).to_glib_none().0);
        }
    }

    pub fn get_property_tool_type(&self) -> DeviceToolType {
        let mut value = Value::from(&0);
        unsafe {
            gobject_ffi::g_object_get_property(self.to_glib_none().0, "tool-type".to_glib_none().0, value.to_glib_none_mut().0);
            from_glib(transmute(value.get::<i32>().unwrap()))
        }
    }

    pub fn set_property_tool_type(&self, tool_type: DeviceToolType) {
        let tool_type = tool_type.to_glib() as i32;
        unsafe {
            gobject_ffi::g_object_set_property(self.to_glib_none().0, "tool-type".to_glib_none().0, Value::from(&tool_type).to_glib_none().0);
        }
    }
}
